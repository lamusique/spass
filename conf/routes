
GET        /                             controllers.HomeController.index


GET        /index                        controllers.GreeterController.index
GET        /greetings                    controllers.GreeterController.greetings
GET        /greet                        controllers.GreeterController.greetInMyLanguage
# If no param as a query string 400 Bad Request.
GET        /parameter                    controllers.GreeterController.parameter(param: String)

GET        /assets/*file                 controllers.Assets.at(path="/public", file)


# SOAP
POST       /soap                         controllers.SoapMockController.mapXML(path ?= "", soapVersion: Option[Double] ?= None)
POST       /soap/                        controllers.SoapMockController.mapXML(path ?= "", soapVersion: Option[Double] ?= None)
POST       /soap/*path                   controllers.SoapMockController.mapXML(path, soapVersion: Option[Double] ?= None)

# SOAP version specified
POST       /soap/1.1/*path               controllers.SoapMockController.mapXML(path, soapVersion: Option[Double] ?= Some(1.1))
POST       /soap/1.2/*path               controllers.SoapMockController.mapXML(path, soapVersion: Option[Double] ?= Some(1.2))


# simple matching REST

# REST specifying XML
GET        /rest/xml/*path               controllers.ClassicUriController.classicGetWithStructure(path, extensionHint ?= "xml", baseDir ?= "rest")
POST       /rest/xml/*path               controllers.RestMockController.postXML(path)
PUT        /rest/xml/*path               controllers.RestMockController.putXML(path)
PATCH      /rest/xml/*path               controllers.RestMockController.patchXML(path)
DELETE     /rest/xml/*path               controllers.RestMockController.deleteXML(path)

# REST specifying JSON
GET        /rest/json/*path              controllers.ClassicUriController.classicGetWithStructure(path, extensionHint ?= "json", baseDir ?= "rest")
POST       /rest/json/*path              controllers.RestMockController.postJSON(path)
PUT        /rest/json/*path              controllers.RestMockController.putJSON(path)
PATCH      /rest/json/*path              controllers.RestMockController.patchJSON(path)
DELETE     /rest/json/*path              controllers.RestMockController.deleteJSON(path)

# REST
GET        /rest/*path                   controllers.ClassicUriController.classicGetWithStructure(path, extensionHint ?= null, baseDir ?= "rest")
POST       /rest/*path                   controllers.RestMockController.doHttpMethodWithBody(path, extensionHint ?= null)
PUT        /rest/*path                   controllers.RestMockController.doHttpMethodWithBody(path, extensionHint ?= null)
PATCH      /rest/*path                   controllers.RestMockController.doHttpMethodWithBody(path, extensionHint ?= null)
DELETE     /rest/*path                   controllers.RestMockController.doHttpMethodWithBody(path, extensionHint ?= null)


# conditional REST

# REST specifying XML
GET        /rest-cond/xml/*path          controllers.ClassicUriController.classicGetWithStructure(path, extensionHint ?= "xml", baseDir ?= "rest-cond")
POST       /rest-cond/xml/*path          controllers.RestConditionalMockController.postXML(path)
PUT        /rest-cond/xml/*path          controllers.RestConditionalMockController.putXML(path)
PATCH      /rest-cond/xml/*path          controllers.RestConditionalMockController.patchXML(path)
DELETE     /rest-cond/xml/*path          controllers.RestConditionalMockController.deleteXML(path)

# REST specifying JSON
GET        /rest-cond/json/*path         controllers.ClassicUriController.classicGetWithStructure(path, extensionHint ?= "json", baseDir ?= "rest-cond")
POST       /rest-cond/json/*path         controllers.RestConditionalMockController.postJSON(path)
PUT        /rest-cond/json/*path         controllers.RestConditionalMockController.putJSON(path)
PATCH      /rest-cond/json/*path         controllers.RestConditionalMockController.patchJSON(path)
DELETE     /rest-cond/json/*path         controllers.RestConditionalMockController.deleteJSON(path)

# REST
GET        /rest-cond/*path              controllers.ClassicUriController.classicGetWithStructure(path, extensionHint ?= null, baseDir ?= "rest-cond")
POST       /rest-cond/*path              controllers.RestConditionalMockController.doHttpMethodWithBody(path, extensionHint ?= null)
PUT        /rest-cond/*path              controllers.RestConditionalMockController.doHttpMethodWithBody(path, extensionHint ?= null)
PATCH      /rest-cond/*path              controllers.RestConditionalMockController.doHttpMethodWithBody(path, extensionHint ?= null)
DELETE     /rest-cond/*path              controllers.RestConditionalMockController.doHttpMethodWithBody(path, extensionHint ?= null)


# Classic GET with query strings plus SOAP
GET        /classic                      controllers.ClassicUriController.classicGet
POST       /classic                      controllers.SoapMockController.mapXML(path ?= "", soapVersion: Option[Double] ?= None)
GET        /classic/                     controllers.ClassicUriController.classicGet
POST       /classic/                     controllers.SoapMockController.mapXML(path ?= "", soapVersion: Option[Double] ?= None)
GET        /classic/*path                controllers.ClassicUriController.classicGetWithStructure(path, extensionHint ?= "xml", baseDir ?= "classic")
POST       /classic/*path                controllers.SoapMockController.mapXML(path, soapVersion: Option[Double] ?= None)


# Classic form POST with application/x-www-form-urlencoded
POST       /form                         controllers.ClassicFormController.postForm(path ?= "", extensionHint ?= "xml", baseDir ?= "form")
POST       /form/*path                   controllers.ClassicFormController.postForm(path, extensionHint ?= "xml", baseDir ?= "form")


# Classic form POST with application/x-www-form-urlencoded
POST       /file/download                controllers.FileController.download(path ?= "", extensionHint ?= "xml", baseDir ?= "file")
POST       /file/download/*path          controllers.FileController.download(path, extensionHint ?= "xml", baseDir ?= "file")
POST       /file/upload                  controllers.FileController.upload(path ?= "", extensionHint ?= "xml", baseDir ?= "file")
POST       /file/upload/*path            controllers.FileController.upload(path, extensionHint ?= "xml", baseDir ?= "file")


GET        /*path                        controllers.GeneralController.index(path)

